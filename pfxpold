#!/usr/bin/perl -w
use strict;
use IO::Socket;
use Unix::Syslog qw(:macros :subs);
use Fcntl qw(:flock);
use POSIX qw(:sys_wait_h setsid);
use Time::HiRes qw(gettimeofday tv_interval);

# Where to find the authentication module
use FindBin qw($Bin);
use lib "$Bin";

# The authentication module itself
use PFXCheck;

# pfxpold: The Postfix Extensible Policy Daemon
#
# Copyright (c) 2009, Martin Schmitt <mas at scsy dot de>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# Debugging features:
# Set environment NOFORK=1 to run in foreground 
# Set environment DEBUG=1 to enable submission of debug messages to Syslog
# e.g. like this: NOFORK=1 DEBUG=1 /usr/sbin/pfxpold
my ($dontfork, $log_debug);
$dontfork  = 1 if ($ENV{'NOFORK'});
$log_debug = 1 if ($ENV{'DEBUG'});

# The lock-/pidfile
my $lockfile = "/var/lock/pfxpold.lock";

# Are we being started as root?
die "pfxpold must be run as root and will drop privileges by itself.\n" unless ($> == 0);

# Chroot target. Leave empty to disable chrooting.
my $chroot = "";
#my $chroot = "/var/spool/postfix";

# User that the script will run as
my $runas_user  = "nobody";

# Find the corresponding group
my @runas_info  = getpwnam($runas_user) or die "No such user: $runas_user\n";
my $runas_uid   = $runas_info[2];
my $runas_gid   = $runas_info[3];
my $runas_group = (getgrgid($runas_gid))[0];

# IP and Port to bind to
my $bind_ip     = "127.0.0.1";
my $bind_port   = 9998;    # From the postfix.org examples

# Start logging to syslog
my $syslog_id       = "pfxpold";
my $syslog_facility = LOG_MAIL;
Unix::Syslog::openlog($syslog_id, LOG_NOWAIT|LOG_PID, $syslog_facility);

# Hardly any user servicable parts beyond this line.

# Open Pidfile, write PID and lock it. 
open my $lock_fh, ">$lockfile" or do { dolog ('warning', "Could not create $lockfile: $!"); exit 1; };
if (flock($lock_fh,LOCK_EX|LOCK_NB)){
        dolog('debug', "Lockfile created: $lockfile");
}else{
        close $lock_fh;
        dolog('warning', "Another instance of pfxpold seems to be running! Aborted."); 
        exit 1;
}
print $lock_fh "$$\n";

# Flush the lockfile's filehandle, perlfaq5:
select((select($lock_fh), $| = 1)[0]); 
dolog('debug', "PID is: $$");

# Set up the socket
my $socket = IO::Socket::INET->new (
        LocalAddr  => $bind_ip,
        LocalPort  => $bind_port,
        Type       => SOCK_STREAM,
	Reuse	   => 1,
        Listen     => 1
        ) or do {
                dolog ('warning', "Trouble creating socket on $bind_ip:$bind_port: $!");
                exit 1;
        };

# Fork unless told otherwise
unless ($dontfork){
        fork && exit;
	# Update lockfile with PID of forked process
	seek ($lock_fh, 0, 0);
	print $lock_fh "$$\n";
	select((select($lock_fh), $| = 1)[0]);  # perlfaq5
	dolog('debug', "Forked. New PID: $$");
	chdir ('/');
        open STDIN,  "/dev/null"  or die "STDIN </dev/null: $!\n";
        open STDOUT, ">/dev/null" or die "STDOUT >/dev/null: $!\n";
        open STDERR, ">/dev/null" or die "STDERR >/dev/null: $!\n";
        setsid();
}

### chrooted and unprivileged operation starts here

# Disappear into chroot
if ($chroot){
	chroot($chroot) or die "Can't chroot to: $chroot\n";;
	chdir('/');
	dolog('info', "Chrooted to: $chroot");
}else{
	dolog('info', "Not chrooting: chrooting is disabled.");
}
	

# Drop privileges. 
dolog('debug', "Dropping privileges to $runas_user($runas_uid)/$runas_group($runas_gid).");
# I avoided "use English" (man perlvar) for GID/UID munging. Here's the key:
# $< = $UID
# $> = $EUID
# $( = $GID
# $) = $EGID
$( = $) = "$runas_gid $runas_gid";
$< = $> = "$runas_uid";
if (
	($< ne "$runas_uid")		or
	($> ne "$runas_uid")		or
	($( ne "$runas_gid $runas_gid") or 
	($) ne "$runas_gid $runas_gid") 
){
	die "Failed to drop privileges to: $runas_user/$runas_group. Aborting.\n";
}
dolog('info', "Now running as $runas_user($runas_uid)/$runas_group($runas_gid).");

# Set a "beautiful" process list entry
$0 = "pfxpold (parent)";

# Instantiate the check class in unprivileged and chroot context.
# So the class can re-initialize itself during runtime.
dolog('debug', "Calling out to PFXCheck.");
my $check_handle = PFXCheck->new();

# Prepare myself for the main loop
my $killed = 0;
my $signal;
my %children;
$SIG{CHLD} = \&reaper;
$SIG{TERM} = sub { $killed = 1; $signal = "TERM"; };
$SIG{INT}  = sub { $killed = 1; $signal = "INT"; };

dolog('info', "pfxpold is up and running.");

# Run the main loop until I get killed
while (0 == $killed){
	while (my $client = $socket->accept){
		dolog('debug', "Awaiting connection.");
		my $child = fork();
		if (0 != $child){
			dolog('debug', "Forked. Child is $child.");
			# Parent does nothing but keep track of children
			$children{$child} = $child;
			close $client;
		}else{
			# Child has the connection and handles it.
			close $socket;

			# Set a "beautiful" process list entry
			$0 = "pfxpold (child)";

			my $t0 = [gettimeofday];
			dolog('info', "Client connected.");

			# Process the query
			my $querydata = ();
			while (my $in = $client->getline()){
				chomp $in;
				if ($in =~ /^$/){
					dolog('debug', "Client done sending data");
					my $response = $check_handle->do_check($querydata);
					dolog('debug', "My response is: $response");
					$client->printflush("action=$response\n\n");
					$querydata = {};
				}else{
					$in = lc($in);
					dolog('debug', "Received line from client: $in");
					my ($key, $value) = split (/=/, $in, 2);
					$querydata->{$key} = $value;
				}
			}
			close $client;
			my $elapsed = sprintf ("%.2f", tv_interval($t0, [gettimeofday]));
			dolog('info', "Client disconnected after $elapsed seconds.");
			exit;
		}
		last if ($killed);
	}
	last if ($killed);
}

dolog('info', "Killed! (By $signal signal.)\n");

# Main loop has ended. Now take care of the children. And kill them.
foreach my $child (keys(%children)){
        dolog('debug', "Killing my children.");
        $children{$child} = 0;
        while ( kill 0 => $child){
                dolog('debug', "Sending $child the TERM signal.");
                kill TERM => $child;
                if ($children{$child}++ > 5){
                        dolog('debug', "Giving up on $child, sending $child the KILL signal.");
                        kill KILL => $child;
                        last;
                }
                if ( kill 0 => $child ){
                        dolog('debug', "Failed to kill $child.");
                }else{
                        dolog('debug', "Killed $child.");
                }
        }
}

# Clean up all evidence.
close $socket;
close $lock_fh;
unlink $lockfile;
dolog('info', "Exiting.\n");
Unix::Syslog::closelog;
exit;
			
sub dolog{
        my $severity = shift; # ('debug'|'info'|'warning')
        my $message  = shift;
	# Exit immediately if $log_debug is not set, to save CPU.
	if ($severity eq "debug"){
		return undef unless ($log_debug);
	}
        chomp $message;
        printf STDERR ("%8s: %s\n", $severity, $message);
        $message =~ s/\%/\%\%/g;

        if ($severity eq "debug"){
                $severity = LOG_DEBUG;
        }elsif($severity eq "info"){
                $severity = LOG_INFO;
        }elsif($severity eq "warning"){
                $severity = LOG_WARNING;
        }else{
                $severity = LOG_INFO;
        }
        Unix::Syslog::syslog($severity, $message);
}

sub reaper{
        foreach (keys(%children)){
                if(my $pid = waitpid($_, WNOHANG)){
                        delete $children{$pid};
			my $children = scalar(keys(%children));
			my $exitasap = "";
			$exitasap = " (exiting)" if ($killed);
                        dolog('debug', "Reaped $pid. $children children left.$exitasap");
                }
        }
}
